package com.java.security.interceptor;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.HttpMediaTypeNotAcceptableException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.servlet.HandlerMapping;

import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * 
 * @author Anil
 * Handles exception generated by controllers
 *
 */
public class JavaRestExceptionHandler {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(JavaRestExceptionHandler.class);

	private static final Marker NOTIFY_ADMIN = MarkerFactory.getMarker("NOTIFY_ADMIN");
	
	public static final String INVALID_ACCEPT_HEADER_MESSAGE = "'Accept' header vaue doesnot match with ";
	
	public static final String INVALID_CONTENT_TYPE_HEADER_MESSAGE = "'Content-Type' header value does not match with ";
	
	public static final String CRITICAL_SYSTEM_ERROR_MESSAGE = "Critical system error";
	
	@ExceptionHandler(InvalidAcceptHeaderException.class)
	protected ResponseEntity<String> handleHttpAcceptHeaderNotAcceptableException(HttpServletRequest request, InvalidAcceptHeaderException ex) throws Exception{
		logException(ex);
		
		request.removeAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);
		
		ResponseInfo error = 
				new ResponseInfo(String.valueOf(HttpStatus.NOT_ACCEPTABLE.value()), invalidAcceptHeaderErrorMessage(ex));
		
		ObjectMapper mapper = new ObjectMapper();
		
		return new ResponseEntity<String>(mapper.writeValueAsString(error), HttpStatus.NOT_ACCEPTABLE);
	}
	
	@ExceptionHandler(InvalidContentTypeHeaderException.class)
	protected ResponseEntity<String> handleHttpContentTypeHeaderNotAcceptableException(InvalidContentTypeHeaderException ex) throws Exception{
		
		logException(ex);
		ResponseInfo error =
				new ResponseInfo(String.valueOf(HttpStatus.NOT_ACCEPTABLE.value()),invalidContentTypeHeaderErrorMessage(ex));
		ObjectMapper mapper = new ObjectMapper();
		return new ResponseEntity<String>(mapper.writeValueAsString(error), HttpStatus.UNSUPPORTED_MEDIA_TYPE);
	}
	
	protected String invalidContentTypeHeaderErrorMessage(InvalidContentTypeHeaderException ex) {

		StringBuilder errorMessage = new StringBuilder(INVALID_CONTENT_TYPE_HEADER_MESSAGE);
		
		for(MediaType mediaType : ex.getSupportedMediaTypes()){
			errorMessage.append("'").append(mediaType).append("'").append(",");
		}
		
		String message = errorMessage.toString();
		
		message = message.substring(0, message.length()-1);
		
		return message;
	}
	
	/**
	 * Exception Handler of Type HttpMediaTypeNotAcceptableException
	 * 
	 * @param ex
	 * @return
	 */
	@ExceptionHandler(HttpMediaTypeNotAcceptableException.class)
	protected ResponseEntity<ResponseInfo> handleHttpAcceptHeaderNotAcceptableException(HttpMediaTypeNotAcceptableException ex){
		logException(ex);
		
		ResponseInfo error =
				new ResponseInfo(String.valueOf(HttpStatus.NOT_ACCEPTABLE.value()), invalidAcceptHeaderErrorMessage(ex));
		
		return new ResponseEntity<ResponseInfo>(error, HttpStatus.NOT_ACCEPTABLE);
		
	}

	/**
	 * Exception Handler of Type Throwable
	 * 
	 * @param ex
	 * @return
	 */
	@ExceptionHandler(Throwable.class)
	protected ResponseEntity<ResponseInfo> handleThrowable(Throwable ex){
		logException(NOTIFY_ADMIN, ex);
		HttpStatus httpStatus = HttpStatus.INTERNAL_SERVER_ERROR;
		ResponseInfo error =
				new ResponseInfo(String.valueOf(HttpStatus.INTERNAL_SERVER_ERROR.value()), CRITICAL_SYSTEM_ERROR_MESSAGE);
		return new ResponseEntity<ResponseInfo>(error, httpStatus);
	}
	
	protected String invalidAcceptHeaderErrorMessage(HttpMediaTypeNotAcceptableException ex) {
		
		StringBuilder errorMessage = new StringBuilder(INVALID_ACCEPT_HEADER_MESSAGE);
		
		for(MediaType mediaType : ex.getSupportedMediaTypes()){
			errorMessage.append("'").append(mediaType).append("'").append(",");
		}
		
		String message = errorMessage.toString();
		
		message = message.substring(0, message.length()-1);
		
		return message;
	}

	protected String invalidAcceptHeaderErrorMessage(InvalidAcceptHeaderException ex) {

		StringBuilder errorMessage = new StringBuilder(INVALID_ACCEPT_HEADER_MESSAGE);
		
		for(MediaType mediaType : ex.getSupportedMediaTypes()){
			errorMessage.append("'").append(mediaType).append("'").append(",");
		}
		
		String message = errorMessage.toString();
		
		message = message.substring(0, message.length()-1);
		
		return message;
	}

	/**
	 * Logs exception in logger and triggers email
	 * 
	 * @param marker
	 * @param ex
	 */
	
	protected void logException(Marker marker, Throwable ex){
		
		if(LOGGER.isErrorEnabled()){
			
			LOGGER.error(marker, "Error occured : ", ex);
		}
	}
	
	/**
	 * Logs exception in logger
	 * 
	 * @param ex
	 */
	protected void logException(Throwable ex){
		
		if(LOGGER.isErrorEnabled()){
			
			LOGGER.error("Error occured : ", ex);
		}
	}
}
